Веб-сервер на Linux
##################################################

HTTP (HyperText Transfer Protocol — «протокол передачи гипертекста») — протокол
прикладного уровня передачи данных, изначально — в виде гипертекстовых
документов в формате HTML, в настоящее время используется для передачи
произвольных данных.

HTTPS — расширение протокола HTTP для поддержки шифрования в целях
повышения безопасности. Данные в протоколе HTTPS передаются поверх
криптографических протоколов TLS или устаревшего в 2015 году SSL. В отличие от
HTTP с TCP-портом 80, для HTTPS по умолчанию используется TCP-порт 443.

TLS (transport layer security — Протокол защиты транспортного уровня), как и его
предшественник SSL (англ. secure sockets layer — слой защищённых сокетов), —
криптографические протоколы, обеспечивающие защищённую передачу данных между
узлами в сети Интернет. TLS и SSL используют асимметричное шифрование для
аутентификации, симметричное шифрование для конфиденциальности и коды
аутентичности сообщений для сохранения целостности сообщений.

Удостоверяющий центр (CA – certificate authority) — доверенная организация,
которая имеет право выпускать сертификаты юридическим и физическим лицам.

СУБД – система управления базами данных, комплекс ПО для работы с базами
данных определённого типа (например, реляционными).

HTTP – это основной протокол работы любого веб-приложения. Сегодня он
используется с различными надстройками и модификациями (HTTP/2, HTTP/3,
HTTPS), но суть остаётся неизменной.
В основе взаимодействия лежат запрос (request) и ответ (response). Запросы
отправляет клиент в сторону сервера, который отвечает на эти запросы.
В запросе можно разделить несколько частей: строка запроса с методом, заголовки и
тело запроса. Метод является режимом запроса (GET, POST, PUT, DELETE и т.д.), к
методу нужно добавить URL (адрес).

Работа HTTPS и TLS (SSL). Сертификаты и удостоверяющие
центры
В современном мире большинство веб-приложений работает по защищенному
протоколу TLS, который является транспортным дополнением, обеспечивающим
безопасный обмен данными. Все трафик при использовании TLS передаётся в
зашифрованном виде, ключ шифрования устанавливается индивидуально для каждой
сессии.
TLS является развитием протокола SSL, который сегодня практически не используется
из-за множественных уязвимостей. Актуальные (рекомендуемые к использованию)
версии TLS на сегодня это 1.2 и 1.3.
Использование SSL/TLS с HTTP обычно обозначается как HTTPS. 


Консольные утилиты для веб

● Получить URL в консоли:
    ○ curl -L https://ya.ru/
    ○ wget https://yastatic.net/jquery/2.1.4/jquery.min.js


Протоколы SSL/TLS и HTTPS

● SSL — первые версии защищенного протокола
● TLS – современный протокол
● HTTPS – работа протокола HTTP поверх защищенного
канала SSL/TLS
● HTTP/2, HTTP/3 – по умолчанию используют
защищенный вариант


Преимущества HTTPS

● Трафик шифруется при передаче
    ○ Нет перехвата данных
    ○ Нельзя изменить содержимое
● Подтверждение соответствия сервера домену
● Надежная доставка через цепочку хостов
● Поддержка новейших веб-технологий


################################################
Nginx

● Самый популярный сервер в мире
● Высокая производительность
● Масштабируемость по количеству подключений
● Открытый продукт (коммерческий Nginx Plus)
● Широкая функциональность
● Модульная архитектура
● Поддержка новых технологий
● Используется как сервер для статики, прокси, кэширующий сервер
● Не исполняет серверный код веб-приложения
● Разработчик первых версий: Игорь Сысоев


Конфигурация Nginx 

● Установка: sudo apt install nginx
● Тестирование конфигурации: sudo nginx -t
● Применить: sudo systemctl reload nginx
● Конфигурация: /etc/nginx/*
● Основной файл: /etc/nginx/nginx.conf
● Блоки: server {}
● Директивы: server_name site.ru;
● Переменные: $uri
● Документация: http://nginx.org/ru/docs/


Пример конфигурации Nginx

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;
    server_name _;
    location / {
        try_files $uri $uri/ =404;
    }
}


################################################
Веб-сервер Apache

● Популярный веб-сервер
● Открытый продукт
● Максимальная функциональность
● Модульная архитектура
● Разные режимы работы (MPM – prefork, event…)
● Плохая масштабируемость по соединениям (prefork)
● Возможность исполнения серверного кода (модули)
● Исполняет роль backend-сервера
● Документация: https://httpd.apache.org/docs/2.4/en/


Конфигурация Apache 

● Установка: sudo apt install apache2
● Тестирование конфигурации: sudo apachectl -t
● Применить: sudo systemctl reload apache2
● Конфигурация: /etc/apache2/*
● Основной файл: /etc/apache2/apache2.conf
● Блоки: <VirtualHost></VirtualHost>
● Директивы: ServerName site.ru
● Документация: https://httpd.apache.org/docs/2.4/en/


Пример конфигурации Apache

Listen 8081
<VirtualHost *:8081>
    ServerName www.example.com

    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    ErrorLog /var/log/httpd/error.log
    CustomLog /var/log/httpd/access.log combined
</VirtualHost>


Пример конфигурации Nginx для Reverse proxy

# Динамические запросы
location / {
    proxy_pass http://localhost:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
}
# Статические запросы
location ~* ^.+.(jpg|jpeg|gif|png|ico|css|zip|pdf|txt|tar|js)$ {
    root /var/www/html;
}


Обработка PHP в Apache

● Установка: apt install libapache2-mod-php8.1 php8.1
● Обработка PHP подключается автоматически, по расширению файла
● Файл для проверки:
<?php
phpinfo();
?>
● Проверяем: curl http://localhost/info.php


Обработка PHP в PHP-FPM

● Установка: apt install php8.1-fpm
● Замена Apache для работы с PHP
● Связь между Nginx и PHP-FPM через UNIX-сокет
● Обработка происходит с помощью location в Nginx
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            root /var/www/html;
            fastcgi_pass unix:/run/php/php8.1-fpm.sock;
        }


################################################
СУБД MySQL

● Самая популярная СУБД для веб-приложений
● Клиент-серверная архитектура
● Несколько веток развития:
    ○ Oracle MySQL
    ○ Percona Server for MySQL
    ○ MariaDB
● Поддержка транзакций
● Репликация
● Поддерживает синтаксис SQL с расширениями
● Документация: https://dev.mysql.com/doc/refman/8.0/en/


Установка MySQL и первые шаги

● Установка: apt install mysql-server-8.0
● Заходим в консоль MySQL: sudo mysql
● Переходим в системную БД mysql: use mysql;
● Получаем список пользователей: SELECT * FROM user\G
● Создаём новую базу данных: CREATE DATABASE gb;
● Создаём таблицу: CREATE TABLE test(i INT);
● Создадим записи в таблице: INSERT INTO test (i) VALUES (1),(2),(3),(4);
● Сделаем выборку из таблицы: SELECT * FROM test;


###################################################### Nginx
// установка
sudo apt install nginx -y

// проверка конфигов, статуса
sudo nginx -t
systemctl status nginx
sudo ss -ntlp

// конфиги тут
ll /etc/nginx
nano /etc/nginx/nginx.conf

// применение конфигов (если меняем что-то)
sudo systemctl reload nginx


# Конфиги сайта по умолчанию
nano /etc/nginx/sites-enabled/default


###################################################### Apache 
// Установка
sudo apt install apache2 -y

// проверка
sudo apachectl -t
sudo systemctl status apache2
sudo ss -ntlp

// конфиги тут
ll /etc/apache2
nano /etc/apache2/apache2.conf

// применение конфигов (если меняем что-то)
sudo systemctl reload apache2


// запустим apache
sudo systemctl start apache2


// правим сайт на порт 8080
sudo nano /etc/apache2/sites-enabled/000-default.conf
 

###################################################### Reverse proxy

// настройки тут
sudo nano /etc/nginx/sites-enabled/default

// проверим, перезапустим
sudo nginx –t
sudo systemctl reload apache2


###################################################### PHP-FPM
// установка
sudo apt install libapache2-mod-php8.1 php8.1 -y

//путь к конфигам
cd /etc/apache2/mods-enabled/
ll
nano php8.1.conf

// установка
apt install php8.1-fpm
cd /etc/php/8.1/
ll

cd fpm/pool.d
ll
nano www.conf


###################################################### MySQL
// установка
sudo apt install mysql-server-8.0 -y
// проверка
systemctl status mysql

// вход на MySQL сервер
sudo mysql

// список БД
show databases;

// переключиться на выбранную БД
use mysql;

// прочитать все из таблицы user
SELECT * FROM user\G;

// создать БД
CREATE DATABASE gb;

// показать таблицы
SHOW TABLES;

// создать таблицу users
CREATE TABLE users(id INT, email VARCHAR(100));

// ставить новые строки в таблицу
INSERT INTO users VALUES (1, 'ivan@mail.ru'),(2, 'user2@mail.ru'),(3, 'user3@mail.ru');

