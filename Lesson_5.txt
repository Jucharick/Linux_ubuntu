Сетевые возможности Linux
##########################################

IP-адрес — уникальный числовой идентификатор устройства в компьютерной сети,
работающей по протоколу IP (Internet Protocol).

Порт (port) — натуральное число, записываемое в заголовках протоколов
транспортного уровня модели OSI (TCP, UDP, SCTP, DCCP).

Сетевой интерфейс — физическое или виртуальное устройство, предназначенное
для передачи данных между программами через компьютерную сеть.

MAC-адрес — уникальный идентификатор, присваиваемый каждой единице активного
оборудования или некоторым их интерфейсам в компьютерных сетях Ethernet.

Первый интерфейс – lo (loopback) служит для связи внутри системы. Например,
если мы подключаемся к базе данных, которая работает на этой же системе. Это
особенный интерфейс, который позволяет убрать для приложений разницу работы в
рамках одного хоста и по сети. 

Второй интерфейс – enp0s3 это проводной сетевой интерфейс. В виртуальной
машине это виртуальная сетевая карта, которая эмулирует заданную в настройках
модель адаптера. Это уже стандартный сетевой интерфейс, который мы используем
для работы с другими хостами по сети. По умолчанию этот интерфейс будет получать
автоматическую конфигурацию от DHCP-сервера в сети (если таковой имеется).

Сокет это сочетание IP-адреса и порта. С помощью сокетов приложения обмениваются
данными по сети. Разделяют TCP- и UDP-сокеты (по протоколу), также существуют
UNIX-сокеты (файлы специального типа).

Информацию по сокетам можно посмотреть через команду ss (socket stat). Сокеты
разделяются по протоколу, самые типичные из них это TCP и UDP.

Чтобы узнать список TCP-сокетов с состоянием listen, достаточно отправить команду:
sudo ss -ntlp
Для учета TCP и UDP сразу:
sudo ss -ntulp
Если опустить sudo, мы не увидим приложения, которые слушают тот или иной сокет.
Эти варианты показывают только прослушиваемые сокеты (listen), если нужно
посмотреть все сокеты (в том числе установленные соединения), используем такую
команду (такой набор параметров легко запомнить):
ss -tulpan
В таблице указан протокол (TCP, UDP), статус (LISTEN, ESTABLISHED) и пары IP:порт
для обеих сторон подключения (Local и Peer).

Фильтрация пакетов
Информационная безопасность и построение защищённых серверов — отдельное
направление в мире информационных технологий. Мы рассмотрим базовые аспекты
работы netfilter и iptables — инструмента управления netfilter. Они
понадобятся нам для понимания, например, построения сетевого взаимодействия
между операционной системой и системой контейнерной виртуализации Docker.

Netfilter — встроенный в ядро Linux сетевой фильтр. Для управления netfilter
служит утилита iptables. Основа iptables — таблицы, в которых содержатся
цепочки с правилами.
Стоит заметить, что в версии Ubuntu 22.04 возможна работа как с классической
утилитой iptables, так и более новой nft (nf_tables). Благодаря режиму
совместимости возможно использовать обычные команды для работы с iptables, при
этом внутри системы будет использоваться новая подсистема nf_tables. В курсе мы
будем использовать именно такой режим.

Основная работа происходит с двумя таблицами:
    1. Таблица filter. В этой таблице происходит фильтрация входящего и
исходящего трафика, а также транзитный трафик.
    2. Таблица nat. Необходима для трансляции адресов и портов.

В каждой таблице есть цепочки — наборы правил, согласно которым обрабатывается
тот или иной трафик. У каждой цепочки есть политики по умолчанию, согласно этим
политикам трафик обрабатывается, если не попадает ни под одно из правил.

Существует 5 типов стандартных цепочек, встроенных в систему:
    1. PREROUTING — для изначальной обработки входящих пакетов.
    2. INPUT — для входящих пакетов, адресованных непосредственно локальному
процессу (клиенту или серверу).
    3. FORWARD — для входящих пакетов, перенаправленных на выход. Заметьте, что
перенаправляемые пакеты проходят сначала цепь PREROUTING, затем FORWARD
и POSTROUTING.
    4. OUTPUT — для пакетов, генерируемых локальными процессами.
    5. POSTROUTING — для окончательной обработки исходящих пакетов.

Политики для цепочки устанавливаются следующим образом:
iptables -P имя_цепочки Действие
Например, iptables -P INPUT ACCEPT разрешит весь входящий трафик, действует
для таблицы filter. Если нам необходимо установить политику в конкретной
таблице, то через параметр -t нужно передать имя таблицы, например: iptables -t
nat -P INPUT ACCEPT. В Ubuntu ACCEPT — политика по умолчанию для всех таблиц
и цепочек. Действует правило: разрешено всё, за исключением того, что запрещено.


Сетевые интерфейсы и команда ip

● ip a – список всех интерфейсов
● ip -s a – показ статистики
● ip -c -s a – включение подсветки
● ip a show enp0s3 – данные по одному интерфейсу
● ip link show enp0s3 – данные уровня L2 (link)
● ip r – просмотр информации о маршрутах


Сокеты и порты

● ss – socket stat
● ss -ntlp – TCP-сокеты в состоянии LISTEN
● ss -ntulp – TCP и UDP-сокеты в состоянии LISTEN
● ss -tulpan – Все TCP и UDP-сокеты


Netplan

● /etc/netplan/*.yaml – конфигурационные файлы
● netplan try – тестирование и применение конфигурации
● netplan apply – применение конфигурации
● Конфигурация по умолчанию:
# Let NetworkManager manage all devices on this system
network:
 version: 2
 renderer: NetworkManager


Netplan – конфигурация с DHCP

 network:
 version: 2
 renderer: networkd
 ethernets:
 enp0s3:
 dhcp4: yes
 nameservers:
 addresses:
 - 8.8.8.8
 - 8.8.4.4

Netplan – статическая конфигурация

 network:
 version: 2
 renderer: networkd
 ethernets:
 enp0s3:
 dhcp4: no
 addresses: [192.168.0.8/24]
 gateway4: 192.168.0.1
 nameservers:
 addresses:
 - 8.8.8.8
 - 8.8.4.4


Диагностика сети

● ping 8.8.8.8 – доступность хоста (ICMP протокол)
● ping ya.ru – проверка DNS и доступности
● host -t a yandex.ru – проверка DNS
● host -t a yandex.ru 8.8.8.8 – другой DNS-сервер
● dig @8.8.8.8 google.com – подробная информация по DNS
● tracepath ya.ru – просмотр маршрута прохождения пакетов
● traceroute ya.ru – альтернатива
● mtr ya.ru – постоянный мониторинг доступности хостов


Правила фильтрации

● Просмотр таблицы
    ○ iptables -L -nv
    ○ iptables -L -nv -t nat
● Политика по умолчанию
    ○ iptables -P INPUT DROP
● Добавление правил
    ○ iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    ○ iptables -I INPUT -p tcp --dport 80 -j ACCEPT
    ○ iptables -A INPUT -p tcp -s 192.168.0.100 --dport 80 -j DROP
● Удаление правил
    ○ iptables -D INPUT 3
    ○ iptables -D INPUT -p tcp --dport 80 -j ACCEPT
● Сброс правил
    ○ iptables -F


Пример конфигурации сервера

# SSH allow
iptables -A INPUT -p tcp --dport=22 -j ACCEPT
# HTTP, HTTPS allow
iptables -A INPUT -p tcp -m multiport --dport 80,443 -j ACCEPT
# loopback allow
iptables -A INPUT -i lo -j ACCEPT
# ICMP
iptables -A INPUT -p icmp -j ACCEPT
# established connections allow
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
# policy drop
iptables -P INPUT DROP


Перенаправление портов

● Редирект с 80 на 8080 порт (TCP):
    ○ iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
● Проверка:
    ○ iptables -L -nv -t nat


Сохранение конфигурации iptables

● Сохранение и восстановление из файла
    ○ iptables-save > iptables.rules
    ○ iptables-restore < iptables.rules
● Сервис netfilter-persistent
    ○ apt install iptables-persistent netfilter-persistent
    ○ netfilter-persistent save
    ○ Конфигурация в /etc/iptables


#######################################################	iptables
# если вдруг утилита не установлена
sudo apt install iptables

# заблокируем трафик с определенного IP-адреса
sudo iptables -t filter -A INPUT -s 192.168.56.1 -j DROP
# или так:
sudo iptables -t filter -A INPUT -s 192.168.56.1 -j REJECT

# очистим правила
sudo iptables -F INPUT

# разрешим трафик с запрещенного IP-адреса
sudo iptables -t filter -A INPUT -s 192.168.56.1 -j ACCEPT

# посмотрим правила
sudo iptables -L

# Запрещаем исходящий трафик по протоколу
sudo iptables –A OUTPUT –p tcp --dport 443 –j REJECT

# сохраним конфиги iptables
sudo iptables-save > ~/iptables_config

# восстановим сохраненные конфиги iptables
sudo iptables-restore < ~/iptables_config

############################################################## Мониторинг ресурсов
# top
•	запустим top c сортировкой по PID
top –o PID
# Команда c меняет отображение последней колонки COMMAND
# Команда V меняет отображение последней колонки COMMAND на вид дерева

# отфильтровать процессы по пользователю
top –u user_new
# htop

# Установим htop
sudo apt install htop

# Запустим
htop
Команды
•	F2 – вход в меню
•	F3 – поиск по процессам
•	F5 – отображать процессы в виде дерева
•	F6 – сортировка
o	t – инверсия сортировки
•	F9 – завершить процесс (kill)
•	u – фильтрация по пользователю
•	F10 - выход


# Загруженность процессора

# Зеленым цветом в диаграмме, показывающей загруженность CPU,
# обозначается часть времени процессора, занятая процессами с
# нормальным приоритетом.
# Синим обозначается часть, занятая процессами с низким приоритетом. 
# Красным — процессы с приоритетом ядра. 
# Желтым — время процессора, потраченное на виртуализацию либо невольно 
# «украденное» другими пользователями, которые работают в других виртуальных 
# серверах, но на тех же физических ресурсах, и активно нагружают процессоры.

# Загруженность памяти

# Диаграмма, отображающая использование оперативной памяти, 
# состоит из трех цветов: зеленого, синего и желтого.

# Зеленый цвет показывает используемую оперативную память, 
# синий — буферы и 
# желтый — системный кеш.

# Возможные значения состояния процесса:

# R — [running or runnable] запущенные или находятся в очереди на запуск
# S — [interruptible sleep] прерываемый сон
# D — [uninterruptible sleep] непрерываемый сон (в основном IO)
# Z — [zombie] процесс зомби, прекращенный, но не забранный родителем
# T — Остановленный сигналом управления заданиями
# t — Остановленный отладчиком
# X — Мёртвый (не должен показываться)


# найдем среди запущенных процессов браузер Firefox
ps aux | grep firefox

# завершим процесс Firefox по его PID
kill 12512

# передать сигнал 9
kill -s 9 12512

############################################################## Команды df, du
df -h

# После запуска программы можно увидеть название устройства (диска),
# общий размер, используемое пространство в абсолютном значении,
# доступное пространство, используемое пространство в процентах
# и путь, к которому прикреплено устройство.

df –hT --total

# Команда du
du
du -h

#Если нужно посмотреть суммарный объем файлов и папок,
# находящихся в текущей директории, следует запустить команду 
du -s
du -sh

# С итогами
du -sсh


####################################################### systemctl

# Подсчитаем количество служб на машине
systemctl | wc -l

# посмотрим инфо о службе SSH
systemctl status sshd


# 4.1	Задание 1
# Настроить iptables: разрешить подключения только на 22-й и 80-й порты.
sudo iptables -L

// используем политики по умолчанию на запрещение общего входящего трафика
sudo iptables -P INPUT DROP

// разрешаем подключения по порту 80
sudo iptables -A INPUT -i eth0 -p tcp --dport 80 -j ACCEPT

// разрешаем подключения по порту 22
sudo iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT


# 4.2	Задание 2
# Настроить проброс портов локально с порта 80 на порт 8080.

sudo iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
sudo iptables –L

sudo iptables –L –t nat


# 4.3	Задание 3
# Запретить любой входящий трафик с IP-адреса 3.4.5.6.
sudo iptables -A INPUT -p tcp -s 3.4.5.6. -j DROP


# 4.4	Задание 4
# Запустите mc. Используя ps, найдите PID процесса, завершите процесс, передав ему сигнал 9.

# откроем новый терминал и там запустим Midnight Commander
mc

# посмотрим первые несколько процессов
ps aux | head
	Главный интерес – первая строка, чтобы знать: в какой колонке PID

# найдем процесс mc
ps aux | grep mc

# прибьем процесс с сигналом 9 (строго, без возможности сохранить данные)
kill -s 9 30779

# убедимся, что больше нет этого процесса
ps aux | grep mc
	в соседнем терминале от процесса mc остался только статический экран


