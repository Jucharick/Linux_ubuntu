Основы Docker
#######################################

Контейнеризация — метод виртуализации, при котором ядро операционной системы
поддерживает несколько изолированных экземпляров пространства пользователя
вместо одного. Эти экземпляры с точки зрения пользователя полностью идентичны
отдельному экземпляру операционной системы. Простыми словами, контейнеризация
позволяет виртуализировать процесс.

Docker Hub — платформа для распространения Docker-контейнеров и управления
ими.

Dockerfile — это сценарий, который состоит из последовательности команд и
аргументов, необходимых для создания образа. Такие сценарии упрощают
развёртывание и процесс подготовки приложения к запуску.

YAML — дружественный формат сериализации данных, концептуально близкий к
языкам разметки, но ориентированный на удобство ввода-вывода типичных структур
данных многих языков программирования.


Если наша основная ОС
— Linux, то нам достаточно изолировать приложение. То есть, мы хотим создать
облегченный вариант виртуализации, где используется общее ядро ОС (Linux), но
окружение (утилиты, библиотеки, конфигурация и т.д.) приложений различное. Такая
технология получила название контейнеризация.


Docker и его архитектура
Docker с точки зрения операционной системы состоит из трёх частей:
1. Docker-демон — процесс, который отвечает за поиск, скачивание образов,
запуск контейнеров и т. д.
2. Docker-клиент — интерфейс взаимодействия пользователя и демона Docker.
Именно через команду Docker пользователь будет скачивать образы и
запускать контейнеры.
3. Docker Hub — хранилище образов для Docker.
С точки зрения архитектуры Docker состоит из следующих компонентов:
1. Images (образы) — это своеобразный шаблон, который содержит экземпляр
операционной системы с набором библиотек, необходимых для работы
приложения.
2. Registry (реестр) — публичное или закрытое хранилище образов. Пример
публичного реестра образов — Docker Hub.
3. Container (контейнер) — запущенное приложение, которое создано из образа.


Контейнеризация

● Быстрое развёртывание приложений из образов
● Полная повторяемость при запуске (надёжность)
● Высокая скорость запуска и удаления контейнеров
● Низкие накладные расходы на виртуализацию
● Возможность преодоления несовместимости софта и ОС
● Автоматизация операций управления приложениями


Реестр образов Docker Hub

● Реестр по умолчанию в Docker
● Веб-интерфейс: https://hub.docker.com/
● Официальные образы (official image)
● Теги (latest, 0.4-alpine)
● Документация к образам


Запуск тестового контейнера

● Установка Docker: apt install docker.io
● Проверка: sudo docker
● Создание и запуск контейнера: docker run hello-world


Базовые операции

● docker ps – просмотр активных контейнеров
● docker ps -a – просмотр всех контейнеров
● docker images – список образов
● docker search nginx – поиск образа
● docker pull nginx – скачивание образа
● docker start|restart|stop nginx – операции с контейнером
● docker rm 9cbf7c3230d0 – удаление контейнера
● docker rmi hello-world – удаление образа
● docker logs nginx1 – просмотр логов контейнера


Типы сетей в Docker

● Bridge — сети по умолчанию, аналог типа подключения NAT в
VirtualBox.
● Host — с помощью этого драйвера контейнер получает доступ к
собственному интерфейсу хоста. Аналог подключения «Мост» в
VirtualBox.
● Macvlan даёт контейнерам прямой доступ к интерфейсу и субинтерфейсу (VLAN) хоста.
● Overlay позволяет строить сети на нескольких хостах с Docker.


Сеть в Docker реализована посредством четырёх сетевых драйверов. Можно провести
аналогию с типом подключения в VirtualBox:
1. Bridge — сети по умолчанию, аналог типа подключения NAT в VirtualBox. Связь
устанавливается через Bridge-интерфейс, который поднимается в
операционной системе при установке Docker и носит название docker0. Этот
интерфейс можно увидеть, выполнив команду ip -a.
2. Host — с помощью этого драйвера контейнер получает доступ к собственному
интерфейсу хоста. Аналог подключения «Мост» в VirtualBox.
3. Macvlan даёт контейнерам прямой доступ к интерфейсу и суб-интерфейсу
(VLAN) хоста.
4. Overlay позволяет строить сети на нескольких хостах с Docker.
Самые часто используемые режимы это bridge и host. По умолчанию сеть
изолирована и работает в режиме bridge. Для доступа в контейнер по сети извне
нужно настраивать проброс портов (опция -p).
В режиме host изоляция сети отсутствует и приложения в контейнере получают
прямой доступ к сети, как обычные приложения.
Посмотреть список сетей Docker:
docker network ls


Подключение томов
Каждый контейнер по умолчанию полностью изолирован с точки зрения файловой
системы. То есть, имеет собственную иерархию директорий и не имеет доступа к
хостовой файловой системе.
Однако, идеология контейнеров предполагает неизменное состояние (stateless). То
есть, изменения файлов внутри контейнера будут сохраняться, но только до той поры,
когда мы решим его обновить. Обновление контейнера состоит из удаления и
создания нового из следующей версии образа. В этом процессе все изменения в
файловой системе контейнера будут потеряны.
Поэтому для сохранения всех данных на постоянной основе часто используются тома
(volumes) – внешние хранилища данных для контейнера. Это могут быть директории
с данными, конфигурационные файлы, рабочие директории и т.д.
Подключение тома производится с помощью опции -v при создании контейнера.
После подключения тома мы получаем доступ к хостовой файловой системе и можем
пользоваться ей как внутренней. При этом все данные тома при удалении контейнера
будут сохранены.
Тома могут быть внутренними для Docker (named volumes) или точками
монтирования хостовых директорий (bind mounts). В нашем примере с Nginx мы
будем использовать второй вариант.
Итак, мы разобрали все элементы для запуска реального контейнера, на примере
которого мы используем работу с сетями и томами.


Запуск Nginx – проброс портов и директории

● Команда создания и запуска: docker run -d --restart always --name nginx1 \
-p 80:80 -v /var/www/html:/usr/share/nginx/html nginx
● Учитываем порты на хосте (ss -ntlp)
● Монтируем директории
● Активируем автозапуск
● Контейнер работает в режиме демона
● Сеть по умолчанию (bridge)


Работа внутри контейнера

● Не рекомендуется в реальной работе
● Заходим: docker exec -ti nginx1 bash
● Смотрим настройки: ls -al /etc/
● Версия базового дистрибутива: cat /etc/os-release
● Настройки nginx: ls -al /etc/nginx/
● Директория сайта: ls -al /usr/share/nginx/html


Docker Compose
##################################

● Запуск нескольких контейнеров одной командой
● Декларативная конфигурация
● Формат YAML (отступы, вложенность)
● Автоматизация запуска систем контейнеров


Синтаксис docker-compose.yml
version: '3'
services:
 wordpress:
 depends_on:
 - db
 image: wordpress:5.3.2-fpm-alpine
 container_name: wordpress
 environment:
 - WORDPRESS_DB_HOST=db:3306
 volumes:
 - wordpress:/var/www/html
 networks:
 - app-network


Использование Docker Compose

● apt install docker-compose – установка
● Проверка yml: apt install yamllint
● docker-compose up -d – создание и запуск
● docker-compose ps – список контейнеров
● docker-compose down – остановить и удалить
● docker-compose stop – остановить
● docker-compose start – запустить
● docker-compose rm – удалить остановленные

#######################################################
// ставим докер
sudo apt install docker.io -y
// или (разница не существенна)
sudo apt install docker -y


# посмотрим в справке основные команды
docker --help
 

# Списки контейнеров и образов
sudo docker ps
sudo docker images


# запустим hello world
sudo docker run hello-world


# история всех контейнеров
sudo docker ps -a


#	оф. доки рекомендуют знакомиться с докером с запуска этого контейнера
# запустим контейнер с названием getting-started
docker run -dp 80:80 docker/getting-started
	если его локально нет, то его образ скачается и тогда уже контейнер запустится
	заходим в браузер по пути http://localhost:80

# удалим контейнер, указав его ID
docker stop 4fc0289cdd93


# пустим веб сервер [1:05]
// поищем
docker search nginx
// скачаем образ
docker pull nginx

# запустим веб сервер nginx на докере с пробросом портов
docker run -d -p 8123:80 nginx
	Теперь в браузере заходим на веб сервер по адресу: http://localhost:8123


# войдем в докер, найдем HTML-файлы
docker exec -it jolly_meitner /bin/bash

// найдем файл-заглушку на вебсерере
find / -name "index.html"

// выход из контейнера
exit


# Dockerfile
# напишем инструкции для сборки нового образа:
nano Dockerfile

FROM ubuntu:latest
MAINTAINER GB_student
RUN apt-get update
RUN apt-get install nginx -y
VOLUME "/var/www/html"
EXPOSE 80
CMD /usr/sbin/nginx -g "daemon off;"


# соберем образ из инструкций в Dockerfile
docker build -t my_nginx_image .

# увидеть наш новый образ можно так:
docker images

# запускаем наш образ на порту 8080
docker run -d -p 9000:80 my_nginx_image

 

# Docker-compose
// устанавливаем
sudo apt install docker-compose -y

// создадим веб-сайт на Wordpress
mkdir wordpress_site
cd wordpress_site

nano docker-compose.yml

wordpress:
    image: wordpress
    links:
     - mariadb:mysql
    environment:
     - WORDPRESS_DB_PASSWORD=password
     - WORDPRESS_DB_USER=root
    ports:
     - "public_ip:80:80"
    volumes:
     - ./html:/var/www/html
mariadb:
    image: mariadb
    environment:
     - MYSQL_ROOT_PASSWORD=password
     - MYSQL_DATABASE=wordpress
    volumes:
     - ./database:/var/lib/mysql
	 
sudo docker-compose up -d
	http://localhost:80

docker ps

docker images

# Удаляем все
docker rm 860aba9898c5

// или так
docker rm $(docker ps -aq)

// удаление образа
docker rmi –f e1f77663ea39

// удалить все образы
docker rmi $(docker images -q)

